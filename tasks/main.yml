---
# Installation using pkg
- name: "Removes Bastille if installed using other method previously"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /usr/local/bin/bastille
    - /usr/local/share/bastille
    - /usr/local/share/man/man1/bastille.1.gz
    - /usr/local/etc/bastille/bastille.conf.sample
    - /usr/local/etc/rc.d/bastille
  when: bastille_version is not defined

- name: "Installs Bastille using pkg"
  pkgng:
    name: bastille
    state: present
  when: bastille_version is not defined

# Installation of custom version from repo
- name: "Removes Bastille if installed using pkg previously"
  pkgng:
    name: bastille
    state: absent
  when: bastille_version is defined

- name: "Downloads custom version of Bastille"
  get_url:
    url: "https://github.com/BastilleBSD/bastille/archive/refs/tags/{{ bastille_version }}.tar.gz"
    dest: "/tmp/{{ bastille_version }}.tar.gz"
  when: bastille_version is defined

- name: "Unpacks custom Bastille version"
  command: "tar -xzf /tmp/{{ bastille_version }}.tar.gz"
  args:
    chdir: "/tmp"
    creates: "/tmp/{{ bastille_version }}/Makefile"
    warn: false # We ignore the warning of using unarchive module since that module does not support bsdtar
  when: bastille_version is defined

- name: "Installs custom Bastille version"
  command: "make install"
  args:
    chdir: "/tmp/bastille-{{ bastille_version }}"
    creates: "/usr/local/bin/bastille"
  when: bastille_version is defined

- name: "Configures bastille"
  template:
    src: usr/local/etc/bastille/bastille.conf.j2
    dest: /usr/local/etc/bastille/bastille.conf

- name: "Enables bastille service"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^bastille_enable.+$"
    line: 'bastille_enable="YES"'

# Networking
- name: "Setup cloned interfaces"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^cloned_interfaces.+$"
    line: 'cloned_interfaces="lo1"'

- name: "Setup lo1 interface name"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^ifconfig_lo1_name.+$"
    line: 'ifconfig_lo1_name="bastille0"'

- name: "Starts the cloned interface"
  command: 'service netif cloneup'

- name: "Configures pf"
  template:
    src: etc/pf.conf.j2
    dest: /etc/pf.conf

- name: "Enables pf service"
  lineinfile:
    path: /etc/rc.conf
    regexp: "^pf_enable.+$"
    line: 'pf_enable="YES"'

- name: "Starts pf"
  service:
    name: pf
    state: restarted

# Bootstrapping releases
- name: "Bootstraps Releases"
  command: 'bastille bootstrap {{ item }} update'
  loop: "{{ bastille_releases }}"

# Bootstrapping templates
- name: "Ensure git is installed in order to bootstrap templates"
  pkgng:
    name: git-lite
    state: present
  when: bastille_templates is defined

- name: "Bootstraps Templates"
  command: 'bastille bootstrap {{ item }}'
  loop: "{{ bastille_templates }}"
  when: bastille_templates is defined

- name: "Create jails"
  shell: bastille create {{ item.options | default('') }} {{ item.name }} {{ item.release }} {{ item.ip }} {{ item.interface | default(bastille_ext_if) }}
  args:
    creates: "{{ bastille_prefix }}/jails/{{ item.name }}/root/COPYRIGHT"
  loop: "{{ bastille_jails }}"
  when: bastille_jails is defined

- name: "Apply templates to jails"
  command: bastille template {{ item.name }} {{ item.templates | map('quote') | join(' ') }} {{ ['--arg'] | product(item.template_args | default([]) | map('quote')) | map('join', ' ') | join(' ') }}
  loop: "{{ bastille_jails }}"
  when: item.templates is defined
